{
  "address": "0xAD39Bd520B519b21Ed1dFE35B21d915c459E892E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stable",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "interestRateBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tenorDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxLoanToPoolBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "reserveFactorBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minCreditScore",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct Types.PoolParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stable",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "interestRateBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tenorDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxLoanToPoolBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "reserveFactorBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minCreditScore",
              "type": "uint16"
            }
          ],
          "internalType": "struct Types.PoolParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "grantAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        }
      ],
      "name": "pausePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "revokeAdminRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        }
      ],
      "name": "unpausePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc436c9cdec7bcfb41c2834d250d1efb04d60be5a1e8856f178d5edee8462e324",
  "receipt": {
    "to": null,
    "from": "0xC5F38CF01f0C0af20DaEfE62ECDCC6311CfeB86c",
    "contractAddress": "0xAD39Bd520B519b21Ed1dFE35B21d915c459E892E",
    "transactionIndex": 1,
    "gasUsed": "3965425",
    "logsBloom": "0x
    "blockHash": "0x137ec57f1373d4c2b966024d96784b11f019de99231b7b65a2c0e7f1c77f61a6",
    "transactionHash": "0xc436c9cdec7bcfb41c2834d250d1efb04d60be5a1e8856f178d5edee8462e324",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25650533,
        "transactionHash": "0xc436c9cdec7bcfb41c2834d250d1efb04d60be5a1e8856f178d5edee8462e324",
        "address": "0xAD39Bd520B519b21Ed1dFE35B21d915c459E892E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c5f38cf01f0c0af20daefe62ecdcc6311cfeb86c",
          "0x000000000000000000000000c5f38cf01f0c0af20daefe62ecdcc6311cfeb86c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x137ec57f1373d4c2b966024d96784b11f019de99231b7b65a2c0e7f1c77f61a6"
      }
    ],
    "blockNumber": 25650533,
    "cumulativeGasUsed": "4011569",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8632aeaa7a93da172a88becd52b5392",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"interestRateBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tenorDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxLoanToPoolBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactorBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minCreditScore\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct Types.PoolParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"interestRateBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tenorDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxLoanToPoolBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactorBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minCreditScore\",\"type\":\"uint16\"}],\"internalType\":\"struct Types.PoolParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"grantAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"}],\"name\":\"pausePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"}],\"name\":\"unpausePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory contract for creating MicroCredit pools\",\"kind\":\"dev\",\"methods\":{\"createPool(address,(uint16,uint16,uint16,uint16,uint16),string,string)\":{\"details\":\"Create a new MicroCredit pool\",\"params\":{\"name\":\"Name for the LP token\",\"params\":\"Pool configuration parameters\",\"stable\":\"Address of the stablecoin (e.g., USDC)\",\"symbol\":\"Symbol for the LP token\"},\"returns\":{\"pool\":\"Address of the created pool\"}},\"getPoolCount()\":{\"details\":\"Get pool count\",\"returns\":{\"_0\":\"Total number of pools created\"}},\"getPools()\":{\"details\":\"Get all created pools\",\"returns\":{\"_0\":\"Array of pool addresses\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantAdminRole(address)\":{\"details\":\"Grant DEFAULT_ADMIN_ROLE to an address\",\"params\":{\"admin\":\"Address to grant the role to\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isValidPool(address)\":{\"details\":\"Check if an address is a valid pool\",\"params\":{\"pool\":\"Address to check\"},\"returns\":{\"_0\":\"True if the address is a valid pool\"}},\"pausePools(address[])\":{\"details\":\"Pause all pools (emergency function)\",\"params\":{\"poolAddresses\":\"Array of pool addresses to pause\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeAdminRole(address)\":{\"details\":\"Revoke DEFAULT_ADMIN_ROLE from an address\",\"params\":{\"admin\":\"Address to revoke the role from\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpausePools(address[])\":{\"details\":\"Unpause all pools\",\"params\":{\"poolAddresses\":\"Array of pool addresses to unpause\"}}},\"title\":\"MicroCreditPoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MicroCreditPoolFactory.sol\":\"MicroCreditPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/MicroCreditPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libs/Types.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/ILoanManager.sol\\\";\\nimport \\\"./interfaces/ICreditScoreRegistry.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\n\\n/**\\n * @title MicroCreditPool\\n * @dev Main pool contract for MicroCredit DAO that manages deposits, loans, and LP shares\\n */\\ncontract MicroCreditPool is IPool, ERC20, ReentrancyGuard, Pausable, AccessControl {\\n    using SafeERC20 for IERC20;\\n    \\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    \\n    // Immutable addresses\\n    IERC20 public immutable stable;\\n    ILoanManager public immutable loanManager;\\n    ICreditScoreRegistry public immutable creditScoreRegistry;\\n    ITreasury public immutable treasury;\\n    \\n    // Pool parameters\\n    Types.PoolParams public params;\\n    \\n    // Pool state\\n    uint256 public totalAssets;\\n    \\n    // Events\\n    event Deposited(address indexed user, uint256 amount, uint256 shares);\\n    event Withdrawn(address indexed user, uint256 shares, uint256 amount);\\n    event LoanRequested(uint256 indexed loanId, address indexed borrower, uint256 amount);\\n    event LoanApproved(uint256 indexed loanId);\\n    event LoanDrawn(uint256 indexed loanId, address indexed borrower, uint256 amount);\\n    event LoanRepaid(uint256 indexed loanId, address indexed payer, uint256 paidAmount);\\n    event LoanDefaulted(uint256 indexed loanId);\\n    event ParamsUpdated(Types.PoolParams oldParams, Types.PoolParams newParams);\\n    \\n    // Custom errors\\n    error AmountZero();\\n    error LowScore();\\n    error ExceedsPoolRatio();\\n    error InvalidState();\\n    error NotManager();\\n    error NothingToWithdraw();\\n    error InsufficientBalance();\\n    \\n    /**\\n     * @dev Constructor\\n     * @param _stable Address of the stablecoin (e.g., USDC)\\n     * @param _loanManager Address of the loan manager\\n     * @param _creditScoreRegistry Address of the credit score registry\\n     * @param _treasury Address of the treasury\\n     * @param _params Pool parameters\\n     * @param _name Name for LP token\\n     * @param _symbol Symbol for LP token\\n     */\\n    constructor(\\n        address _stable,\\n        address _loanManager,\\n        address _creditScoreRegistry,\\n        address _treasury,\\n        Types.PoolParams memory _params,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        stable = IERC20(_stable);\\n        loanManager = ILoanManager(_loanManager);\\n        creditScoreRegistry = ICreditScoreRegistry(_creditScoreRegistry);\\n        treasury = ITreasury(_treasury);\\n        params = _params;\\n        \\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Deposit stablecoins and receive LP shares\\n     * @param amount Amount of stablecoins to deposit\\n     */\\n    function deposit(uint256 amount) external override nonReentrant whenNotPaused {\\n        if (amount == 0) revert AmountZero();\\n        \\n        uint256 shares;\\n        if (totalSupply() == 0) {\\n            shares = amount;\\n        } else {\\n            shares = (amount * totalSupply()) / totalAssets;\\n        }\\n        \\n        if (shares == 0) revert AmountZero();\\n        \\n        // Transfer stablecoins from user to pool\\n        stable.safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Update state\\n        totalAssets += amount;\\n        \\n        // Mint LP shares\\n        _mint(msg.sender, shares);\\n        \\n        emit Deposited(msg.sender, amount, shares);\\n    }\\n    \\n    /**\\n     * @dev Withdraw stablecoins by burning LP shares\\n     * @param shares Amount of LP shares to burn\\n     */\\n    function withdraw(uint256 shares) external override nonReentrant whenNotPaused {\\n        if (shares == 0) revert AmountZero();\\n        if (balanceOf(msg.sender) < shares) revert InsufficientBalance();\\n        \\n        uint256 amount = (shares * totalAssets) / totalSupply();\\n        if (amount == 0) revert NothingToWithdraw();\\n        \\n        // Burn LP shares\\n        _burn(msg.sender, shares);\\n        \\n        // Update state\\n        totalAssets -= amount;\\n        \\n        // Transfer stablecoins to user\\n        stable.safeTransfer(msg.sender, amount);\\n        \\n        emit Withdrawn(msg.sender, shares, amount);\\n    }\\n    \\n    /**\\n     * @dev Request a loan from the pool\\n     * @param amount Amount of stablecoins requested\\n     * @return loanId ID of the created loan\\n     */\\n    function requestLoan(uint256 amount) external override whenNotPaused returns (uint256 loanId) {\\n        if (amount == 0) revert AmountZero();\\n        if (amount > totalAssets * params.maxLoanToPoolBps / 10000) revert ExceedsPoolRatio();\\n        \\n        // Check credit score if required\\n        if (params.minCreditScore > 0) {\\n            uint256 userScore = creditScoreRegistry.getScore(msg.sender);\\n            if (userScore < params.minCreditScore) revert LowScore();\\n        }\\n        \\n        // Create loan in loan manager\\n        loanId = loanManager.createLoan(msg.sender, amount, params.interestRateBps, params.tenorDays);\\n        \\n        emit LoanRequested(loanId, msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev Approve a loan request (manager only)\\n     * @param loanId ID of the loan to approve\\n     */\\n    function approveLoan(uint256 loanId) external override onlyRole(MANAGER_ROLE) whenNotPaused {\\n        loanManager.approve(loanId);\\n        emit LoanApproved(loanId);\\n    }\\n    \\n    /**\\n     * @dev Process loan drawdown (borrower only)\\n     * @param loanId ID of the loan to drawdown\\n     */\\n    function drawdown(uint256 loanId) external override nonReentrant whenNotPaused {\\n        // Get loan details to verify borrower\\n        Types.Loan memory loan = loanManager.getLoan(loanId);\\n        if (loan.borrower != msg.sender) revert InvalidState();\\n        \\n        // Process drawdown in loan manager\\n        loanManager.drawdown(loanId);\\n        \\n        // Transfer stablecoins to borrower\\n        stable.safeTransfer(msg.sender, loan.principal);\\n        \\n        // Update pool state\\n        totalAssets -= loan.principal;\\n        \\n        emit LoanDrawn(loanId, msg.sender, loan.principal);\\n    }\\n    \\n    /**\\n     * @dev Repay a loan\\n     * @param loanId ID of the loan to repay\\n     * @param amount Amount of stablecoins to repay\\n     * @return remaining Remaining debt after repayment\\n     */\\n    function repay(uint256 loanId, uint256 amount) external override nonReentrant whenNotPaused returns (uint256 remaining) {\\n        if (amount == 0) revert AmountZero();\\n        \\n        // Transfer stablecoins from user to pool\\n        stable.safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Get debt breakdown before repayment\\n        (uint256 principalBefore, uint256 interestBefore, , ) = loanManager.currentDebt(loanId);\\n        \\n        // Process repayment in loan manager\\n        remaining = loanManager.repay(loanId, amount);\\n        \\n        // Get debt breakdown after repayment\\n        (uint256 principalAfter, uint256 interestAfter, , ) = loanManager.currentDebt(loanId);\\n        \\n        // Calculate amounts paid\\n        uint256 principalPaid = principalBefore - principalAfter;\\n        uint256 interestPaid = interestBefore - interestAfter;\\n        \\n        // Calculate treasury fee\\n        uint256 feeInterest = (interestPaid * params.reserveFactorBps) / 10000;\\n        \\n        // Send fee to treasury\\n        if (feeInterest > 0) {\\n            stable.safeApprove(address(treasury), feeInterest);\\n            treasury.receiveFees(address(stable), feeInterest);\\n        }\\n        \\n        // Update pool state with net amounts\\n        uint256 netInterest = interestPaid - feeInterest;\\n        totalAssets += principalPaid + netInterest;\\n        \\n        // Check if loan is fully repaid\\n        if (remaining == 0) {\\n            // Increase borrower's credit score\\n            creditScoreRegistry.increaseScore(msg.sender, 15);\\n            emit LoanRepaid(loanId, msg.sender, amount);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Mark a loan as defaulted (manager only)\\n     * @param loanId ID of the loan to mark as defaulted\\n     */\\n    function markDefault(uint256 loanId) external override onlyRole(MANAGER_ROLE) whenNotPaused {\\n        // Get loan details\\n        Types.Loan memory loan = loanManager.getLoan(loanId);\\n        \\n        // Mark as defaulted in loan manager\\n        loanManager.markDefault(loanId);\\n        \\n        // Decrease borrower's credit score\\n        creditScoreRegistry.decreaseScore(loan.borrower, 30);\\n        \\n        emit LoanDefaulted(loanId);\\n    }\\n    \\n    /**\\n     * @dev Get current pool parameters\\n     * @return Pool parameters\\n     */\\n    function getParams() external view override returns (Types.PoolParams memory) {\\n        return params;\\n    }\\n    \\n    /**\\n     * @dev Update pool parameters (manager only)\\n     * @param newParams New pool parameters\\n     */\\n    function setParams(Types.PoolParams calldata newParams) external onlyRole(MANAGER_ROLE) {\\n        Types.PoolParams memory oldParams = params;\\n        params = newParams;\\n        \\n        emit ParamsUpdated(oldParams, newParams);\\n    }\\n    \\n    /**\\n     * @dev Pause the pool (manager only)\\n     */\\n    function pause() external onlyRole(MANAGER_ROLE) {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Unpause the pool (manager only)\\n     */\\n    function unpause() external onlyRole(MANAGER_ROLE) {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Grant MANAGER_ROLE to an address\\n     * @param manager Address to grant the role to\\n     */\\n    function grantManagerRole(address manager) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(MANAGER_ROLE, manager);\\n    }\\n    \\n    /**\\n     * @dev Revoke MANAGER_ROLE from an address\\n     * @param manager Address to revoke the role from\\n     */\\n    function revokeManagerRole(address manager) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _revokeRole(MANAGER_ROLE, manager);\\n    }\\n    \\n    /**\\n     * @dev Get total assets in the pool\\n     * @return Total assets amount\\n     */\\n    function getTotalAssets() external view returns (uint256) {\\n        return totalAssets;\\n    }\\n    \\n    /**\\n     * @dev Calculate shares for a given amount of stablecoins\\n     * @param amount Amount of stablecoins\\n     * @return shares Corresponding LP shares\\n     */\\n    function calculateShares(uint256 amount) external view returns (uint256 shares) {\\n        if (totalSupply() == 0) {\\n            shares = amount;\\n        } else {\\n            shares = (amount * totalSupply()) / totalAssets;\\n        }\\n    }\\n    \\n    /**\\n     * @dev Calculate stablecoins for a given amount of LP shares\\n     * @param shares Amount of LP shares\\n     * @return amount Corresponding stablecoins\\n     */\\n    function calculateAmount(uint256 shares) external view returns (uint256 amount) {\\n        if (totalSupply() == 0) {\\n            amount = 0;\\n        } else {\\n            amount = (shares * totalAssets) / totalSupply();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07f9b85d9ea40d5e0391c6dae5cce4e0ccef9bde7317a561e6edd287211db279\",\"license\":\"MIT\"},\"contracts/MicroCreditPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./MicroCreditPool.sol\\\";\\nimport \\\"./libs/Types.sol\\\";\\n\\n/**\\n * @title MicroCreditPoolFactory\\n * @dev Factory contract for creating MicroCredit pools\\n */\\ncontract MicroCreditPoolFactory is AccessControl {\\n    // Array of all created pools\\n    address[] public pools;\\n    \\n    // Mapping from pool address to creation info\\n    mapping(address => bool) public isPool;\\n    \\n    // Events\\n    event PoolCreated(\\n        address indexed pool,\\n        address indexed stable,\\n        Types.PoolParams params\\n    );\\n    \\n    // Custom errors\\n    error InvalidAddress();\\n    error PoolAlreadyExists();\\n    \\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Create a new MicroCredit pool\\n     * @param stable Address of the stablecoin (e.g., USDC)\\n     * @param params Pool configuration parameters\\n     * @param name Name for the LP token\\n     * @param symbol Symbol for the LP token\\n     * @return pool Address of the created pool\\n     */\\n    function createPool(\\n        address stable,\\n        Types.PoolParams calldata params,\\n        string memory name,\\n        string memory symbol\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (address pool) {\\n        if (stable == address(0)) revert InvalidAddress();\\n        if (bytes(name).length == 0 || bytes(symbol).length == 0) revert InvalidAddress();\\n        \\n        // Validate pool parameters\\n        if (params.interestRateBps > 10000) revert InvalidAddress(); // Max 100% APR\\n        if (params.tenorDays == 0 || params.tenorDays > 3650) revert InvalidAddress(); // Max 10 years\\n        if (params.maxLoanToPoolBps > 10000) revert InvalidAddress(); // Max 100% of pool\\n        if (params.reserveFactorBps > 10000) revert InvalidAddress(); // Max 100% of interest\\n        if (params.minCreditScore > 100) revert InvalidAddress(); // Max score 100\\n        \\n        // Create pool contract\\n        pool = address(new MicroCreditPool(\\n            stable,\\n            address(this), // Factory will be the loan manager initially\\n            address(this), // Factory will be the credit score registry initially\\n            address(this), // Factory will be the treasury initially\\n            params,\\n            name,\\n            symbol\\n        ));\\n        \\n        // Register pool\\n        pools.push(pool);\\n        isPool[pool] = true;\\n        \\n        emit PoolCreated(pool, stable, params);\\n    }\\n    \\n    /**\\n     * @dev Get all created pools\\n     * @return Array of pool addresses\\n     */\\n    function getPools() external view returns (address[] memory) {\\n        return pools;\\n    }\\n    \\n    /**\\n     * @dev Get pool count\\n     * @return Total number of pools created\\n     */\\n    function getPoolCount() external view returns (uint256) {\\n        return pools.length;\\n    }\\n    \\n    /**\\n     * @dev Check if an address is a valid pool\\n     * @param pool Address to check\\n     * @return True if the address is a valid pool\\n     */\\n    function isValidPool(address pool) external view returns (bool) {\\n        return isPool[pool];\\n    }\\n    \\n    /**\\n     * @dev Grant DEFAULT_ADMIN_ROLE to an address\\n     * @param admin Address to grant the role to\\n     */\\n    function grantAdminRole(address admin) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (admin == address(0)) revert InvalidAddress();\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n    \\n    /**\\n     * @dev Revoke DEFAULT_ADMIN_ROLE from an address\\n     * @param admin Address to revoke the role from\\n     */\\n    function revokeAdminRole(address admin) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (admin == msg.sender) revert InvalidAddress(); // Cannot revoke own role\\n        _revokeRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n    \\n    /**\\n     * @dev Pause all pools (emergency function)\\n     * @param poolAddresses Array of pool addresses to pause\\n     */\\n    function pausePools(address[] calldata poolAddresses) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < poolAddresses.length; i++) {\\n            address pool = poolAddresses[i];\\n            if (isPool[pool]) {\\n                MicroCreditPool(pool).pause();\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * @dev Unpause all pools\\n     * @param poolAddresses Array of pool addresses to unpause\\n     */\\n    function unpausePools(address[] calldata poolAddresses) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        for (uint256 i = 0; i < poolAddresses.length; i++) {\\n            address pool = poolAddresses[i];\\n            if (isPool[pool]) {\\n                MicroCreditPool(pool).unpause();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3e0b3c4e46bc1d59ee9e8f2ac34062085006ce9ccabf69c2ccf607bd785b150\",\"license\":\"MIT\"},\"contracts/interfaces/ICreditScoreRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title ICreditScoreRegistry\\n * @dev Interface for Credit Score Registry\\n */\\ninterface ICreditScoreRegistry {\\n    function getScore(address user) external view returns (uint256);\\n    function increaseScore(address user, uint256 delta) external;\\n    function decreaseScore(address user, uint256 delta) external;\\n}\\n\",\"keccak256\":\"0x1f3475577e2d718ab9fb20ea05c41ba51c6e6a7b4baaf78da0ec63384278ed71\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libs/Types.sol\\\";\\n\\n/**\\n * @title ILoanManager\\n * @dev Interface for Loan Manager\\n */\\ninterface ILoanManager {\\n    function createLoan(\\n        address borrower,\\n        uint256 amount,\\n        uint16 rateBps,\\n        uint16 tenorDays\\n    ) external returns (uint256 loanId);\\n    \\n    function approve(uint256 loanId) external;\\n    function drawdown(uint256 loanId) external;\\n    \\n    function currentDebt(uint256 loanId) external view returns (\\n        uint256 principal,\\n        uint256 interest,\\n        uint256 lateFees,\\n        uint256 total\\n    );\\n    \\n    function repay(uint256 loanId, uint256 amount) external returns (uint256 remaining);\\n    function markDefault(uint256 loanId) external;\\n    function getLoan(uint256 loanId) external view returns (Types.Loan memory);\\n}\\n\",\"keccak256\":\"0x39e693b61e7d55f9dad41003dbce2c4a54770742d3ca062470f04a0854f328a2\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libs/Types.sol\\\";\\n\\n/**\\n * @title IPool\\n * @dev Interface for MicroCredit Pool\\n */\\ninterface IPool {\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 shares) external;\\n    function requestLoan(uint256 amount) external returns (uint256 loanId);\\n    function approveLoan(uint256 loanId) external;\\n    function drawdown(uint256 loanId) external;\\n    function repay(uint256 loanId, uint256 amount) external returns (uint256 remaining);\\n    function markDefault(uint256 loanId) external;\\n    function totalAssets() external view returns (uint256);\\n    function getParams() external view returns (Types.PoolParams memory);\\n}\\n\",\"keccak256\":\"0x1593b54b7b0632ac7de2f9b29e94ff1aac83990cf41469739efa7f64d8f0cfcc\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title ITreasury\\n * @dev Interface for Treasury\\n */\\ninterface ITreasury {\\n    function receiveFees(address token, uint256 amount) external;\\n    function balanceOf(address token) external view returns (uint256);\\n    function claim(address token, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa45973e6643701b024830719b2e09e01607e62043e8ea34f09204cff06292103\",\"license\":\"MIT\"},\"contracts/libs/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Types\\n * @dev Shared types and structures for MicroCredit DAO\\n */\\nlibrary Types {\\n    /**\\n     * @dev Loan status enumeration\\n     */\\n    enum LoanStatus {\\n        Requested,  // 0: Loan requested by borrower\\n        Approved,   // 1: Loan approved by manager\\n        Drawn,      // 2: Loan amount drawn by borrower\\n        Repaid,     // 3: Loan fully repaid\\n        Defaulted   // 4: Loan defaulted\\n    }\\n\\n    /**\\n     * @dev Pool configuration parameters\\n     */\\n    struct PoolParams {\\n        uint16 interestRateBps;      // Interest rate in basis points (e.g., 500 = 5% annual simple)\\n        uint16 tenorDays;            // Loan term in days\\n        uint16 maxLoanToPoolBps;     // Maximum loan amount as % of pool assets (e.g., 5000 = 50%)\\n        uint16 reserveFactorBps;     // % of interest that goes to Treasury\\n        uint16 minCreditScore;       // Minimum credit score required (0-100)\\n    }\\n\\n    /**\\n     * @dev Loan structure\\n     */\\n    struct Loan {\\n        address borrower;     // Borrower address\\n        uint256 principal;    // Principal amount\\n        uint256 createdAt;    // Timestamp when loan was created\\n        uint256 drawnAt;      // Timestamp when loan was drawn\\n        uint256 dueAt;        // Timestamp when loan is due\\n        uint16 rateBps;       // Interest rate in basis points\\n        uint16 tenorDays;     // Loan term in days\\n        LoanStatus status;    // Current loan status\\n    }\\n}\\n\",\"keccak256\":\"0x42cf03e37c41a87198786e015f4a5f7f14951eb2600d8fe5bc15360870e03145\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001215760003560e01c80638eec5d7011620000af578063a217fddf116200007a578063a217fddf146200028a578063ac4afa381462000293578063b30b8d5114620002c3578063c634b78e14620002da578063d547741f14620002f157600080fd5b80638eec5d70146200023c57806391d1485414620002455780639a19c7b0146200025c578063a20dc529146200027357600080fd5b80633f5e9c3511620000f05780633f5e9c3514620001b75780635ab78ee114620001ce5780635b16ebb714620001fd578063673a2a1f146200022357600080fd5b806301ffc9a71462000126578063248a9ca314620001525780632f2ff15d146200018757806336568abe14620001a0575b600080fd5b6200013d6200013736600462000ce2565b62000308565b60405190151581526020015b60405180910390f35b620001786200016336600462000d0e565b60009081526020819052604090206001015490565b60405190815260200162000149565b6200019e6200019836600462000d45565b62000340565b005b6200019e620001b136600462000d45565b6200036e565b6200019e620001c836600462000d74565b620003f4565b6200013d620001df36600462000dee565b6001600160a01b031660009081526002602052604090205460ff1690565b6200013d6200020e36600462000dee565b60026020526000908152604090205460ff1681565b6200022d620004d2565b60405162000149919062000e0c565b60015462000178565b6200013d6200025636600462000d45565b62000536565b6200019e6200026d36600462000dee565b6200055f565b6200019e6200028436600462000d74565b620005a3565b62000178600081565b620002aa620002a436600462000d0e565b6200067b565b6040516001600160a01b03909116815260200162000149565b620002aa620002d436600462000f06565b620006a6565b6200019e620002eb36600462000dee565b62000932565b6200019e6200030236600462000d45565b62000974565b60006001600160e01b03198216637965db0b60e01b14806200033a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546200035d816200099d565b620003698383620009ac565b505050565b6001600160a01b0381163314620003e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b620003f0828262000a34565b5050565b600062000401816200099d565b60005b82811015620004cc57600084848381811062000424576200042462000fa2565b90506020020160208101906200043b919062000dee565b6001600160a01b03811660009081526002602052604090205490915060ff1615620004b657806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200049c57600080fd5b505af1158015620004b1573d6000803e3d6000fd5b505050505b5080620004c38162000fce565b91505062000404565b50505050565b606060018054806020026020016040519081016040528092919081815260200182805480156200052c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200050d575b5050505050905090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006200056c816200099d565b336001600160a01b03831603620005965760405163e6c4247b60e01b815260040160405180910390fd5b620003f060008362000a34565b6000620005b0816200099d565b60005b82811015620004cc576000848483818110620005d357620005d362000fa2565b9050602002016020810190620005ea919062000dee565b6001600160a01b03811660009081526002602052604090205490915060ff16156200066557806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200064b57600080fd5b505af115801562000660573d6000803e3d6000fd5b505050505b5080620006728162000fce565b915050620005b3565b600181815481106200068c57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080620006b4816200099d565b6001600160a01b038616620006dc5760405163e6c4247b60e01b815260040160405180910390fd5b83511580620006ea57508251155b15620007095760405163e6c4247b60e01b815260040160405180910390fd5b6127106200071b602087018762000ffd565b61ffff1611156200073f5760405163e6c4247b60e01b815260040160405180910390fd5b62000751604086016020870162000ffd565b61ffff161580620007785750610e4262000772604087016020880162000ffd565b61ffff16115b15620007975760405163e6c4247b60e01b815260040160405180910390fd5b612710620007ac606087016040880162000ffd565b61ffff161115620007d05760405163e6c4247b60e01b815260040160405180910390fd5b612710620007e5608087016060880162000ffd565b61ffff161115620008095760405163e6c4247b60e01b815260040160405180910390fd5b60646200081d60a087016080880162000ffd565b61ffff161115620008415760405163e6c4247b60e01b815260040160405180910390fd5b85303030888888604051620008569062000cd4565b620008689796959493929190620010da565b604051809103906000f08015801562000885573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0384811691821790925560008181526002602052604090819020805460ff191690941790935591519294508816917fa0311b346f66fad99cd0f6225b7c284d45cb2a0d343353395b50743c7fdddb4690620009219089906200114c565b60405180910390a350949350505050565b60006200093f816200099d565b6001600160a01b038216620009675760405163e6c4247b60e01b815260040160405180910390fd5b620003f0600083620009ac565b60008281526020819052604090206001015462000991816200099d565b62000369838362000a34565b620009a9813362000a9c565b50565b620009b8828262000536565b620003f0576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620009f03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62000a40828262000536565b15620003f0576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b62000aa8828262000536565b620003f05762000ab88162000b00565b62000ac583602062000b13565b60405160200162000ad89291906200115c565b60408051601f198184030181529082905262461bcd60e51b8252620003db91600401620011d5565b60606200033a6001600160a01b03831660145b6060600062000b24836002620011ea565b62000b3190600262001204565b67ffffffffffffffff81111562000b4c5762000b4c62000e5b565b6040519080825280601f01601f19166020018201604052801562000b77576020820181803683370190505b509050600360fc1b8160008151811062000b955762000b9562000fa2565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000bc75762000bc762000fa2565b60200101906001600160f81b031916908160001a905350600062000bed846002620011ea565b62000bfa90600162001204565b90505b600181111562000c7c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000c325762000c3262000fa2565b1a60f81b82828151811062000c4b5762000c4b62000fa2565b60200101906001600160f81b031916908160001a90535060049490941c9362000c74816200121a565b905062000bfd565b50831562000ccd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620003db565b9392505050565b613418806200123583390190565b60006020828403121562000cf557600080fd5b81356001600160e01b03198116811462000ccd57600080fd5b60006020828403121562000d2157600080fd5b5035919050565b80356001600160a01b038116811462000d4057600080fd5b919050565b6000806040838503121562000d5957600080fd5b8235915062000d6b6020840162000d28565b90509250929050565b6000806020838503121562000d8857600080fd5b823567ffffffffffffffff8082111562000da157600080fd5b818501915085601f83011262000db657600080fd5b81358181111562000dc657600080fd5b8660208260051b850101111562000ddc57600080fd5b60209290920196919550909350505050565b60006020828403121562000e0157600080fd5b62000ccd8262000d28565b6020808252825182820181905260009190848201906040850190845b8181101562000e4f5783516001600160a01b03168352928401929184019160010162000e28565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262000e8357600080fd5b813567ffffffffffffffff8082111562000ea15762000ea162000e5b565b604051601f8301601f19908116603f0116810190828211818310171562000ecc5762000ecc62000e5b565b8160405283815286602085880101111562000ee657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008084860361010081121562000f1f57600080fd5b62000f2a8662000d28565b945060a0601f198201121562000f3f57600080fd5b5060208501925060c085013567ffffffffffffffff8082111562000f6257600080fd5b62000f708883890162000e71565b935060e087013591508082111562000f8757600080fd5b5062000f968782880162000e71565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000fe35762000fe362000fb8565b5060010190565b803561ffff8116811462000d4057600080fd5b6000602082840312156200101057600080fd5b62000ccd8262000fea565b61ffff806200102a8362000fea565b168352806200103c6020840162000fea565b16602084015280620010516040840162000fea565b16604084015280620010666060840162000fea565b166060840152806200107b6080840162000fea565b166080840152505050565b60005b83811015620010a357818101518382015260200162001089565b50506000910152565b60008151808452620010c681602086016020860162001086565b601f01601f19169290920160200192915050565b6001600160a01b038881168252878116602083015286811660408301528516606082015260006101606200111260808401876200101b565b806101208401526200112781840186620010ac565b90508281036101408401526200113e8185620010ac565b9a9950505050505050505050565b60a081016200033a82846200101b565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200119681601785016020880162001086565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620011c981602884016020880162001086565b01602801949350505050565b60208152600062000ccd6020830184620010ac565b80820281158282048414176200033a576200033a62000fb8565b808201808211156200033a576200033a62000fb8565b6000816200122c576200122c62000fb8565b50600019019056fe6101006040523480156200001257600080fd5b50604051620034183803806200341883398101604081905262000035916200032f565b81816003620000458382620004f7565b506004620000548282620004f7565b50506001600555506006805460ff191690556001600160a01b03808816608090815287821660a05286821660c05290851660e0528351600880546020870151604088015160608901519589015161ffff908116680100000000000000000261ffff60401b1997821666010000000000000261ffff60301b19938316640100000000029390931663ffffffff60201b19948316620100000263ffffffff19909616929097169190911793909317919091169390931792909217929092161790556200012060003362000159565b6200014c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083362000159565b50505050505050620005c3565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff16620001fa5760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001b93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b03811681146200021657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156200025657620002566200021b565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200028757620002876200021b565b604052919050565b805161ffff811681146200021657600080fd5b600082601f830112620002b457600080fd5b81516001600160401b03811115620002d057620002d06200021b565b6020620002e6601f8301601f191682016200025c565b8281528582848701011115620002fb57600080fd5b60005b838110156200031b578581018301518282018401528201620002fe565b506000928101909101919091529392505050565b60008060008060008060008789036101608112156200034d57600080fd5b6200035889620001fe565b97506200036860208a01620001fe565b96506200037860408a01620001fe565b95506200038860608a01620001fe565b945060a0607f19820112156200039d57600080fd5b50620003a862000231565b620003b660808a016200028f565b8152620003c660a08a016200028f565b6020820152620003d960c08a016200028f565b6040820152620003ec60e08a016200028f565b6060820152620004006101008a016200028f565b60808201526101208901519093506001600160401b03808211156200042457600080fd5b620004328b838c01620002a2565b93506101408a01519150808211156200044a57600080fd5b50620004598a828b01620002a2565b91505092959891949750929550565b600181811c908216806200047d57607f821691505b6020821081036200049e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004f257600081815260208120601f850160051c81016020861015620004cd5750805b601f850160051c820191505b81811015620004ee57828155600101620004d9565b5050505b505050565b81516001600160401b038111156200051357620005136200021b565b6200052b8162000524845462000468565b84620004a4565b602080601f8311600181146200056357600084156200054a5750858301515b600019600386901b1c1916600185901b178555620004ee565b600085815260208120601f198616915b82811015620005945788860151825594840194600190910190840162000573565b5085821015620005b35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e051612d8f62000689600039600081816104840152818161144501526114af0152600081816104dc01528181610b330152818161155e015261178701526000818161058d01528181610c1201528181610d3501528181610dec01528181610fab01528181611228015281816112b7015281816113330152818161167001526116fd0152600081816102d7015281816108b701528181610e63015281816110d3015281816111dd0152818161142301526114800152612d8f6000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c806370a0823111610146578063aadc1ac1116100c3578063d547741f11610087578063d547741f14610642578063d8aed14514610655578063dd62ed3e14610668578063e1d927c81461067b578063ec87621c1461068e578063f104686a146106a357600080fd5b8063aadc1ac114610575578063b3ccbcfe14610588578063b6b55f25146105af578063be4dc94f146105c2578063cff0ab96146105d557600080fd5b806395d89b411161010a57806395d89b411461052c578063a079a4dd14610534578063a217fddf14610547578063a457c2d71461054f578063a9059cbb1461056257600080fd5b806370a08231146104ae57806381e17840146104d75780638456cb59146104fe5780638d5d34291461050657806391d148541461051957600080fd5b80632f2ff15d116101df5780633f4ba83a116101a35780633f4ba83a146103ca57806348dc5893146103d25780635c975abb146103e55780635e615a6b146103f057806361d027b31461047f5780636e07302b146104a657600080fd5b80632f2ff15d1461036f578063313ce5671461038257806336568abe1461039157806339509351146103a45780633ec16194146103b757600080fd5b806322be3de11161022657806322be3de1146102d257806323b872dd14610311578063248a9ca31461032457806326e885e3146103475780632e1a7d4d1461035c57600080fd5b806301e1d1141461026357806301ffc9a71461027f57806306fdde03146102a2578063095ea7b3146102b757806318160ddd146102ca575b600080fd5b61026c60095481565b6040519081526020015b60405180910390f35b61029261028d366004612694565b6106b6565b6040519015158152602001610276565b6102aa6106ed565b60405161027691906126e2565b6102926102c536600461272a565b61077f565b60025461026c565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610276565b61029261031f366004612756565b610797565b61026c610332366004612797565b60009081526007602052604090206001015490565b61035a6103553660046127b0565b6107bb565b005b61035a61036a366004612797565b6107e2565b61035a61037d3660046127cd565b610928565b60405160128152602001610276565b61035a61039f3660046127cd565b610952565b6102926103b236600461272a565b6109d1565b61026c6103c5366004612797565b6109f3565b61035a610a28565b61026c6103e0366004612797565b610a48565b60065460ff16610292565b6104726040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506040805160a08101825260085461ffff8082168352620100008204811660208401526401000000008204811693830193909352600160301b810483166060830152600160401b9004909116608082015290565b60405161027691906127fd565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b60095461026c565b61026c6104bc3660046127b0565b6001600160a01b031660009081526020819052604090205490565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b61035a610a72565b61026c610514366004612797565b610a92565b6102926105273660046127cd565b610cd2565b6102aa610cfd565b61035a610542366004612797565b610d0c565b61026c600081565b61029261055d36600461272a565b610eec565b61029261057036600461272a565b610f67565b61035a610583366004612797565b610f75565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b61035a6105bd366004612797565b61103e565b61035a6105d03660046127b0565b611155565b60085461060d9061ffff808216916201000081048216916401000000008204811691600160301b8104821691600160401b9091041685565b6040805161ffff968716815294861660208601529285169284019290925283166060830152909116608082015260a001610276565b61035a6106503660046127cd565b611178565b61026c610663366004612844565b61119d565b61026c610676366004612866565b61160c565b61035a610689366004612797565b611637565b61026c600080516020612d3a83398151915281565b61035a6106b1366004612894565b611817565b60006001600160e01b03198216637965db0b60e01b14806106e757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600380546106fc906128ac565b80601f0160208091040260200160405190810160405280929190818152602001828054610728906128ac565b80156107755780601f1061074a57610100808354040283529160200191610775565b820191906000526020600020905b81548152906001019060200180831161075857829003601f168201915b5050505050905090565b60003361078d8185856118ce565b5060019392505050565b6000336107a58582856119f2565b6107b0858585611a6c565b506001949350505050565b60006107c681611c10565b6107de600080516020612d3a83398151915283611c1a565b5050565b6107ea611ca0565b6107f2611cf9565b80600003610813576040516365e52d5160e11b815260040160405180910390fd5b3360009081526020819052604090205481111561084357604051631e9acf1760e31b815260040160405180910390fd5b600061084e60025490565b60095461085b90846128f6565b610865919061290d565b90508060000361088857604051630686827b60e51b815260040160405180910390fd5b6108923383611d41565b80600960008282546108a4919061292f565b909155506108de90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611e73565b604080518381526020810183905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc691015b60405180910390a2506109256001600555565b50565b60008281526007602052604090206001015461094381611c10565b61094d8383611c1a565b505050565b6001600160a01b03811633146109c75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6107de8282611ed6565b60003361078d8185856109e4838361160c565b6109ee9190612942565b6118ce565b60006109fe60025490565b600003610a09575090565b600954600254610a1990846128f6565b6106e7919061290d565b919050565b600080516020612d3a833981519152610a4081611c10565b610925611f3d565b6000610a5360025490565b600003610a6257506000919050565b600254600954610a1990846128f6565b600080516020612d3a833981519152610a8a81611c10565b610925611f8f565b6000610a9c611cf9565b81600003610abd576040516365e52d5160e11b815260040160405180910390fd5b60085460095461271091610ade9164010000000090910461ffff16906128f6565b610ae8919061290d565b821115610b085760405163037f3db160e11b815260040160405180910390fd5b600854600160401b900461ffff1615610bd957604051630d47875d60e41b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d47875d090602401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190612955565b600854909150600160401b900461ffff16811015610bd7576040516371de036760e01b815260040160405180910390fd5b505b6008546040516326aaa76b60e21b81523360048201526024810184905261ffff80831660448301526201000090920490911660648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639aaa9dac906084016020604051808303816000875af1158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190612955565b9050336001600160a01b0316817f97e04be2fd6414727fe9d0400464568f4384aa8b06264119565ca8f6cc2a4b7a84604051610cc591815260200190565b60405180910390a3919050565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600480546106fc906128ac565b610d14611ca0565b610d1c611cf9565b604051632820036560e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063504006ca9060240161010060405180830381865afa158015610d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da991906129b9565b80519091506001600160a01b03163314610dd65760405163baf3f0f760e01b815260040160405180910390fd5b60405163a079a4dd60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a079a4dd90602401600060405180830381600087803b158015610e3857600080fd5b505af1158015610e4c573d6000803e3d6000fd5b5050506020820151610e8b91506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390611e73565b806020015160096000828254610ea1919061292f565b9091555050602081810151604051908152339184917fc62ee953da618bcc68fed468c3c85caff664703ca837d26dfe39ad31fac01a67910160405180910390a3506109256001600555565b60003381610efa828661160c565b905083811015610f5a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016109be565b6107b082868684036118ce565b60003361078d818585611a6c565b600080516020612d3a833981519152610f8d81611c10565b610f95611cf9565b604051632dd67e5560e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b759f95490602401600060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50506040518492507f073e754af3e7d644af8000094f3c23bc20ef9c40cc057bffa060b0230adf00f49150600090a25050565b611046611ca0565b61104e611cf9565b8060000361106f576040516365e52d5160e11b815260040160405180910390fd5b600061107a60025490565b6000036110885750806110a5565b60095460025461109890846128f6565b6110a2919061290d565b90505b806000036110c6576040516365e52d5160e11b815260040160405180910390fd5b6110fb6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fcc565b816009600082825461110d9190612942565b9091555061111d90503382612004565b604080518381526020810183905233917f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca9101610912565b600061116081611c10565b6107de600080516020612d3a83398151915283611ed6565b60008281526007602052604090206001015461119381611c10565b61094d8383611ed6565b60006111a7611ca0565b6111af611cf9565b816000036111d0576040516365e52d5160e11b815260040160405180910390fd5b6112056001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611fcc565b60405163bcb2966760e01b81526004810184905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bcb2966790602401608060405180830381865afa15801561126f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112939190612a70565b505060405163d8aed14560e01b8152600481018890526024810187905291935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d8aed145906044016020604051808303816000875af1158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190612955565b92506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bcb29667886040518263ffffffff1660e01b815260040161137f91815260200190565b608060405180830381865afa15801561139c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c09190612a70565b505091509150600082856113d4919061292f565b905060006113e2838661292f565b6008549091506000906127109061140490600160301b900461ffff16846128f6565b61140e919061290d565b9050801561150b5761146a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836120c3565b604051622c4a6960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169062b129a490604401600060405180830381600087803b1580156114f257600080fd5b505af1158015611506573d6000803e3d6000fd5b505050505b6000611517828461292f565b90506115238185612942565b600960008282546115349190612942565b909155505060008990036115fa5760405163d3ec35b760e01b8152336004820152600f60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d3ec35b790604401600060405180830381600087803b1580156115aa57600080fd5b505af11580156115be573d6000803e3d6000fd5b50506040518c81523392508d91507f512d3e65b3e58c2187bb1872aa435dba5bd09c1c03823ba56ab70aac411e4a219060200160405180910390a35b50505050505050506106e76001600555565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600080516020612d3a83398151915261164f81611c10565b611657611cf9565b604051632820036560e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063504006ca9060240161010060405180830381865afa1580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e491906129b9565b604051631c3b24f960e31b8152600481018590529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e1d927c890602401600060405180830381600087803b15801561174957600080fd5b505af115801561175d573d6000803e3d6000fd5b50508251604051635a35893b60e11b81526001600160a01b039182166004820152601e60248201527f0000000000000000000000000000000000000000000000000000000000000000909116925063b46b12769150604401600060405180830381600087803b1580156117cf57600080fd5b505af11580156117e3573d6000803e3d6000fd5b50506040518592507f0789b7097e8066538cfaa1132488b132e14ba5f0c938c8b7aaf8cf40356aab0b9150600090a2505050565b600080516020612d3a83398151915261182f81611c10565b6040805160a0810182526008805461ffff8082168452620100008204811660208501526401000000008204811694840194909452600160301b810484166060840152600160401b9004909216608082015290839061188d8282612ab3565b9050507f70dc85460b875b246fa67ec9fee8ab6bc04b352f1ae05953498f7b03f683e2d081846040516118c1929190612b94565b60405180910390a1505050565b6001600160a01b0383166119305760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016109be565b6001600160a01b0382166119915760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016109be565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006119fe848461160c565b90506000198114611a665781811015611a595760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016109be565b611a6684848484036118ce565b50505050565b6001600160a01b038316611ad05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016109be565b6001600160a01b038216611b325760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016109be565b6001600160a01b03831660009081526020819052604090205481811015611baa5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016109be565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611a66565b61092581336121d8565b611c248282610cd2565b6107de5760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c5c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600260055403611cf25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109be565b6002600555565b60065460ff1615611d3f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109be565b565b6001600160a01b038216611da15760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016109be565b6001600160a01b03821660009081526020819052604090205481811015611e155760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016109be565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261094d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612231565b611ee08282610cd2565b156107de5760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611f45612306565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b611f97611cf9565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f723390565b6040516001600160a01b0380851660248301528316604482015260648101829052611a669085906323b872dd60e01b90608401611e9f565b6001600160a01b03821661205a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016109be565b806002600082825461206c9190612942565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b80158061213d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b9190612955565b155b6121a85760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016109be565b6040516001600160a01b03831660248201526044810182905261094d90849063095ea7b360e01b90606401611e9f565b6121e28282610cd2565b6107de576121ef8161234f565b6121fa836020612361565b60405160200161220b929190612c59565b60408051601f198184030181529082905262461bcd60e51b82526109be916004016126e2565b6000612286826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125049092919063ffffffff16565b90508051600014806122a75750808060200190518101906122a79190612cce565b61094d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109be565b60065460ff16611d3f5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109be565b60606106e76001600160a01b03831660145b606060006123708360026128f6565b61237b906002612942565b67ffffffffffffffff8111156123935761239361296e565b6040519080825280601f01601f1916602001820160405280156123bd576020820181803683370190505b509050600360fc1b816000815181106123d8576123d8612cf0565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061240757612407612cf0565b60200101906001600160f81b031916908160001a905350600061242b8460026128f6565b612436906001612942565b90505b60018111156124ae576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061246a5761246a612cf0565b1a60f81b82828151811061248057612480612cf0565b60200101906001600160f81b031916908160001a90535060049490941c936124a781612d06565b9050612439565b5083156124fd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109be565b9392505050565b6060612513848460008561251b565b949350505050565b60608247101561257c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109be565b600080866001600160a01b031685876040516125989190612d1d565b60006040518083038185875af1925050503d80600081146125d5576040519150601f19603f3d011682016040523d82523d6000602084013e6125da565b606091505b50915091506125eb878383876125f6565b979650505050505050565b6060831561266557825160000361265e576001600160a01b0385163b61265e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109be565b5081612513565b612513838381511561267a5781518083602001fd5b8060405162461bcd60e51b81526004016109be91906126e2565b6000602082840312156126a657600080fd5b81356001600160e01b0319811681146124fd57600080fd5b60005b838110156126d95781810151838201526020016126c1565b50506000910152565b60208152600082518060208401526127018160408501602087016126be565b601f01601f19169190910160400192915050565b6001600160a01b038116811461092557600080fd5b6000806040838503121561273d57600080fd5b823561274881612715565b946020939093013593505050565b60008060006060848603121561276b57600080fd5b833561277681612715565b9250602084013561278681612715565b929592945050506040919091013590565b6000602082840312156127a957600080fd5b5035919050565b6000602082840312156127c257600080fd5b81356124fd81612715565b600080604083850312156127e057600080fd5b8235915060208301356127f281612715565b809150509250929050565b60a081016106e7828461ffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b6000806040838503121561285757600080fd5b50508035926020909101359150565b6000806040838503121561287957600080fd5b823561288481612715565b915060208301356127f281612715565b600060a082840312156128a657600080fd5b50919050565b600181811c908216806128c057607f821691505b6020821081036128a657634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106e7576106e76128e0565b60008261292a57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156106e7576106e76128e0565b808201808211156106e7576106e76128e0565b60006020828403121561296757600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b8051610a2381612715565b61ffff8116811461092557600080fd5b8051610a238161298f565b805160058110610a2357600080fd5b60006101008083850312156129cd57600080fd5b6040519081019067ffffffffffffffff821181831017156129fe57634e487b7160e01b600052604160045260246000fd5b81604052612a0b84612984565b815260208401516020820152604084015160408201526060840151606082015260808401516080820152612a4160a0850161299f565b60a0820152612a5260c0850161299f565b60c0820152612a6360e085016129aa565b60e0820152949350505050565b60008060008060808587031215612a8657600080fd5b505082516020840151604085015160609095015191969095509092509050565b600081356106e78161298f565b8135612abe8161298f565b61ffff8116905081548161ffff1982161783556020840135612adf8161298f565b63ffff00008160101b169050808363ffffffff198416171784556040850135612b078161298f565b65ffff000000008160201b1690508365ffffffffffff1984161793508084831717855560608601359250612b3a8361298f565b67ffff0000000000008360301b1667ffff00000000000019851683178217178555505050506107de612b6e60808401612aa6565b825469ffff0000000000000000191660409190911b69ffff000000000000000016178255565b6101408101612bdc828561ffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b8235612be78161298f565b61ffff90811660a0840152602084013590612c018261298f565b90811660c0840152604084013590612c188261298f565b90811660e0840152606084013590612c2f8261298f565b908116610100840152608084013590612c478261298f565b80821661012085015250509392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c918160178501602088016126be565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612cc28160288401602088016126be565b01602801949350505050565b600060208284031215612ce057600080fd5b815180151581146124fd57600080fd5b634e487b7160e01b600052603260045260246000fd5b600081612d1557612d156128e0565b506000190190565b60008251612d2f8184602087016126be565b919091019291505056fe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08a2646970667358221220d2371b281af607c10606c912d0473afada9911028638b014e31249ddd7d0ae7b64736f6c63430008110033a26469706673582212201e154cb51757e6ef8706badb3564654fea0ad5f9f46df1f41e2fcc74488878a764736f6c63430008110033",
  "devdoc": {
    "details": "Factory contract for creating MicroCredit pools",
    "kind": "dev",
    "methods": {
      "createPool(address,(uint16,uint16,uint16,uint16,uint16),string,string)": {
        "details": "Create a new MicroCredit pool",
        "params": {
          "name": "Name for the LP token",
          "params": "Pool configuration parameters",
          "stable": "Address of the stablecoin (e.g., USDC)",
          "symbol": "Symbol for the LP token"
        },
        "returns": {
          "pool": "Address of the created pool"
        }
      },
      "getPoolCount()": {
        "details": "Get pool count",
        "returns": {
          "_0": "Total number of pools created"
        }
      },
      "getPools()": {
        "details": "Get all created pools",
        "returns": {
          "_0": "Array of pool addresses"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantAdminRole(address)": {
        "details": "Grant DEFAULT_ADMIN_ROLE to an address",
        "params": {
          "admin": "Address to grant the role to"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isValidPool(address)": {
        "details": "Check if an address is a valid pool",
        "params": {
          "pool": "Address to check"
        },
        "returns": {
          "_0": "True if the address is a valid pool"
        }
      },
      "pausePools(address[])": {
        "details": "Pause all pools (emergency function)",
        "params": {
          "poolAddresses": "Array of pool addresses to pause"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeAdminRole(address)": {
        "details": "Revoke DEFAULT_ADMIN_ROLE from an address",
        "params": {
          "admin": "Address to revoke the role from"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpausePools(address[])": {
        "details": "Unpause all pools",
        "params": {
          "poolAddresses": "Array of pool addresses to unpause"
        }
      }
    },
    "title": "MicroCreditPoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/MicroCreditPoolFactory.sol:MicroCreditPoolFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4091,
        "contract": "contracts/MicroCreditPoolFactory.sol:MicroCreditPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4095,
        "contract": "contracts/MicroCreditPoolFactory.sol:MicroCreditPoolFactory",
        "label": "isPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/MicroCreditPoolFactory.sol:MicroCreditPoolFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/MicroCreditPoolFactory.sol:MicroCreditPoolFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}