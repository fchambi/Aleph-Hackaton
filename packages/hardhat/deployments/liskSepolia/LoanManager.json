{
  "address": "0x75aaAad403b206db02B8bD0ea8E357D238Ae48f3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLoanId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "LoanAccountingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "rateBps",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "tenorDays",
          "type": "uint16"
        }
      ],
      "name": "LoanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Types.LoanStatus",
          "name": "from",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Types.LoanStatus",
          "name": "to",
          "type": "uint8"
        }
      ],
      "name": "LoanStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "rateBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "tenorDays",
          "type": "uint16"
        }
      ],
      "name": "createLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lateFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoan",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "drawnAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dueAt",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "rateBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tenorDays",
              "type": "uint16"
            },
            {
              "internalType": "enum Types.LoanStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Loan",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLoanCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "grantPoolRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "drawnAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueAt",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "rateBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "tenorDays",
          "type": "uint16"
        },
        {
          "internalType": "enum Types.LoanStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "markDefault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "revokePoolRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x70643ece66888bbf2402b34356de2506f6ddd0e6aaf8ab88b910b1839cf962e1",
  "receipt": {
    "to": null,
    "from": "0xC5F38CF01f0C0af20DaEfE62ECDCC6311CfeB86c",
    "contractAddress": "0x75aaAad403b206db02B8bD0ea8E357D238Ae48f3",
    "transactionIndex": 1,
    "gasUsed": "1262532",
    "logsBloom": "0x
    "blockHash": "0xc6e00bf435b7045ca78b5dc211012a5e13202665584319debcf979b2e1887586",
    "transactionHash": "0x70643ece66888bbf2402b34356de2506f6ddd0e6aaf8ab88b910b1839cf962e1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25650527,
        "transactionHash": "0x70643ece66888bbf2402b34356de2506f6ddd0e6aaf8ab88b910b1839cf962e1",
        "address": "0x75aaAad403b206db02B8bD0ea8E357D238Ae48f3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c5f38cf01f0c0af20daefe62ecdcc6311cfeb86c",
          "0x000000000000000000000000c5f38cf01f0c0af20daefe62ecdcc6311cfeb86c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc6e00bf435b7045ca78b5dc211012a5e13202665584319debcf979b2e1887586"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 25650527,
        "transactionHash": "0x70643ece66888bbf2402b34356de2506f6ddd0e6aaf8ab88b910b1839cf962e1",
        "address": "0x75aaAad403b206db02B8bD0ea8E357D238Ae48f3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000c5f38cf01f0c0af20daefe62ecdcc6311cfeb86c",
          "0x000000000000000000000000c5f38cf01f0c0af20daefe62ecdcc6311cfeb86c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc6e00bf435b7045ca78b5dc211012a5e13202665584319debcf979b2e1887586"
      }
    ],
    "blockNumber": 25650527,
    "cumulativeGasUsed": "1308676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c587519d7c1b108d85a4026883e7527a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLoanId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"LoanAccountingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"rateBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"tenorDays\",\"type\":\"uint16\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Types.LoanStatus\",\"name\":\"from\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Types.LoanStatus\",\"name\":\"to\",\"type\":\"uint8\"}],\"name\":\"LoanStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"rateBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tenorDays\",\"type\":\"uint16\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lateFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoan\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawnAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"rateBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tenorDays\",\"type\":\"uint16\"},{\"internalType\":\"enum Types.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"grantPoolRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawnAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"rateBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tenorDays\",\"type\":\"uint16\"},{\"internalType\":\"enum Types.LoanStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"markDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"revokePoolRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages loan lifecycle and accounting for MicroCredit pools\",\"kind\":\"dev\",\"methods\":{\"approve(uint256)\":{\"details\":\"Approve a loan request\",\"params\":{\"loanId\":\"ID of the loan to approve\"}},\"createLoan(address,uint256,uint16,uint16)\":{\"details\":\"Create a new loan request\",\"params\":{\"amount\":\"Principal amount requested\",\"borrower\":\"Address of the borrower\",\"rateBps\":\"Interest rate in basis points\",\"tenorDays\":\"Loan term in days\"},\"returns\":{\"loanId\":\"Unique identifier for the loan\"}},\"currentDebt(uint256)\":{\"details\":\"Calculate current debt for a loan\",\"params\":{\"loanId\":\"ID of the loan\"},\"returns\":{\"interest\":\"Accrued interest\",\"lateFees\":\"Late fees (always 0 in MVP)\",\"principal\":\"Remaining principal\",\"total\":\"Total debt\"}},\"drawdown(uint256)\":{\"details\":\"Process loan drawdown\",\"params\":{\"loanId\":\"ID of the loan to drawdown\"}},\"getLoan(uint256)\":{\"details\":\"Get loan details\",\"params\":{\"loanId\":\"ID of the loan\"},\"returns\":{\"_0\":\"Loan struct\"}},\"getLoanCount()\":{\"details\":\"Get total loan count\",\"returns\":{\"_0\":\"Total number of loans created\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantPoolRole(address)\":{\"details\":\"Grant POOL_ROLE to a pool contract\",\"params\":{\"pool\":\"Address of the pool contract\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"markDefault(uint256)\":{\"details\":\"Mark a loan as defaulted\",\"params\":{\"loanId\":\"ID of the loan to mark as defaulted\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"repay(uint256,uint256)\":{\"details\":\"Process loan repayment\",\"params\":{\"amount\":\"Amount being repaid\",\"loanId\":\"ID of the loan to repay\"},\"returns\":{\"remaining\":\"Remaining debt after repayment\"}},\"revokePoolRole(address)\":{\"details\":\"Revoke POOL_ROLE from a pool contract\",\"params\":{\"pool\":\"Address of the pool contract\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"LoanManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoanManager.sol\":\"LoanManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./libs/Types.sol\\\";\\nimport \\\"./interfaces/ILoanManager.sol\\\";\\n\\n/**\\n * @title LoanManager\\n * @dev Manages loan lifecycle and accounting for MicroCredit pools\\n */\\ncontract LoanManager is ILoanManager, AccessControl {\\n    bytes32 public constant POOL_ROLE = keccak256(\\\"POOL_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    \\n    // Loan counter and mapping\\n    uint256 private _loanCounter;\\n    mapping(uint256 => Types.Loan) public loans;\\n    \\n    // Events\\n    event LoanCreated(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        uint256 amount,\\n        uint16 rateBps,\\n        uint16 tenorDays\\n    );\\n    event LoanStatusChanged(\\n        uint256 indexed loanId,\\n        Types.LoanStatus from,\\n        Types.LoanStatus to\\n    );\\n    event LoanAccountingUpdated(\\n        uint256 indexed loanId,\\n        uint256 interestPaid,\\n        uint256 principalPaid,\\n        uint256 remaining\\n    );\\n    \\n    // Custom errors\\n    error Unauthorized();\\n    error InvalidLoanId();\\n    error InvalidState();\\n    error AmountZero();\\n    \\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MANAGER_ROLE, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Create a new loan request\\n     * @param borrower Address of the borrower\\n     * @param amount Principal amount requested\\n     * @param rateBps Interest rate in basis points\\n     * @param tenorDays Loan term in days\\n     * @return loanId Unique identifier for the loan\\n     */\\n    function createLoan(\\n        address borrower,\\n        uint256 amount,\\n        uint16 rateBps,\\n        uint16 tenorDays\\n    ) external onlyRole(POOL_ROLE) returns (uint256 loanId) {\\n        if (amount == 0) revert AmountZero();\\n        if (borrower == address(0)) revert InvalidState();\\n        \\n        loanId = _loanCounter++;\\n        \\n        loans[loanId] = Types.Loan({\\n            borrower: borrower,\\n            principal: amount,\\n            createdAt: block.timestamp,\\n            drawnAt: 0,\\n            dueAt: 0,\\n            rateBps: rateBps,\\n            tenorDays: tenorDays,\\n            status: Types.LoanStatus.Requested\\n        });\\n        \\n        emit LoanCreated(loanId, borrower, amount, rateBps, tenorDays);\\n    }\\n    \\n    /**\\n     * @dev Approve a loan request\\n     * @param loanId ID of the loan to approve\\n     */\\n    function approve(uint256 loanId) external onlyRole(POOL_ROLE) {\\n        Types.Loan storage loan = loans[loanId];\\n        if (loan.borrower == address(0)) revert InvalidLoanId();\\n        if (loan.status != Types.LoanStatus.Requested) revert InvalidState();\\n        \\n        loan.status = Types.LoanStatus.Approved;\\n        \\n        emit LoanStatusChanged(loanId, Types.LoanStatus.Requested, Types.LoanStatus.Approved);\\n    }\\n    \\n    /**\\n     * @dev Process loan drawdown\\n     * @param loanId ID of the loan to drawdown\\n     */\\n    function drawdown(uint256 loanId) external onlyRole(POOL_ROLE) {\\n        Types.Loan storage loan = loans[loanId];\\n        if (loan.borrower == address(0)) revert InvalidLoanId();\\n        if (loan.status != Types.LoanStatus.Approved) revert InvalidState();\\n        \\n        loan.status = Types.LoanStatus.Drawn;\\n        loan.drawnAt = block.timestamp;\\n        loan.dueAt = block.timestamp + (loan.tenorDays * 1 days);\\n        \\n        emit LoanStatusChanged(loanId, Types.LoanStatus.Approved, Types.LoanStatus.Drawn);\\n    }\\n    \\n    /**\\n     * @dev Calculate current debt for a loan\\n     * @param loanId ID of the loan\\n     * @return principal Remaining principal\\n     * @return interest Accrued interest\\n     * @return lateFees Late fees (always 0 in MVP)\\n     * @return total Total debt\\n     */\\n    function currentDebt(uint256 loanId) external view returns (\\n        uint256 principal,\\n        uint256 interest,\\n        uint256 lateFees,\\n        uint256 total\\n    ) {\\n        Types.Loan storage loan = loans[loanId];\\n        if (loan.borrower == address(0)) revert InvalidLoanId();\\n        if (loan.status != Types.LoanStatus.Drawn) revert InvalidState();\\n        \\n        principal = loan.principal;\\n        interest = _calculateInterest(loan);\\n        lateFees = 0; // MVP: no late fees\\n        total = principal + interest;\\n    }\\n    \\n    /**\\n     * @dev Process loan repayment\\n     * @param loanId ID of the loan to repay\\n     * @param amount Amount being repaid\\n     * @return remaining Remaining debt after repayment\\n     */\\n    function repay(uint256 loanId, uint256 amount) external onlyRole(POOL_ROLE) returns (uint256 remaining) {\\n        if (amount == 0) revert AmountZero();\\n        \\n        Types.Loan storage loan = loans[loanId];\\n        if (loan.borrower == address(0)) revert InvalidLoanId();\\n        if (loan.status != Types.LoanStatus.Drawn) revert InvalidState();\\n        \\n        uint256 currentInterest = _calculateInterest(loan);\\n        uint256 totalDebt = loan.principal + currentInterest;\\n        \\n        uint256 interestPaid;\\n        uint256 principalPaid;\\n        \\n        if (amount >= totalDebt) {\\n            // Full repayment\\n            loan.status = Types.LoanStatus.Repaid;\\n            loan.principal = 0;\\n            remaining = 0;\\n            interestPaid = currentInterest;\\n            principalPaid = loan.principal;\\n            \\n            emit LoanStatusChanged(loanId, Types.LoanStatus.Drawn, Types.LoanStatus.Repaid);\\n        } else {\\n            // Partial repayment - prioritize interest\\n            interestPaid = amount <= currentInterest ? amount : currentInterest;\\n            principalPaid = amount - interestPaid;\\n            \\n            loan.principal -= principalPaid;\\n            remaining = totalDebt - amount;\\n        }\\n        \\n        emit LoanAccountingUpdated(loanId, interestPaid, principalPaid, remaining);\\n    }\\n    \\n    /**\\n     * @dev Mark a loan as defaulted\\n     * @param loanId ID of the loan to mark as defaulted\\n     */\\n    function markDefault(uint256 loanId) external onlyRole(POOL_ROLE) {\\n        Types.Loan storage loan = loans[loanId];\\n        if (loan.borrower == address(0)) revert InvalidLoanId();\\n        if (loan.status != Types.LoanStatus.Drawn) revert InvalidState();\\n        if (block.timestamp <= loan.dueAt) revert InvalidState();\\n        \\n        loan.status = Types.LoanStatus.Defaulted;\\n        \\n        emit LoanStatusChanged(loanId, Types.LoanStatus.Drawn, Types.LoanStatus.Defaulted);\\n    }\\n    \\n    /**\\n     * @dev Calculate accrued interest for a loan\\n     * @param loan Loan struct\\n     * @return Accrued interest amount\\n     */\\n    function _calculateInterest(Types.Loan storage loan) private view returns (uint256) {\\n        if (loan.drawnAt == 0) return 0;\\n        \\n        uint256 elapsedDays = (block.timestamp - loan.drawnAt) / 1 days;\\n        return (loan.principal * loan.rateBps * elapsedDays) / (10000 * 365);\\n    }\\n    \\n    /**\\n     * @dev Grant POOL_ROLE to a pool contract\\n     * @param pool Address of the pool contract\\n     */\\n    function grantPoolRole(address pool) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(POOL_ROLE, pool);\\n    }\\n    \\n    /**\\n     * @dev Revoke POOL_ROLE from a pool contract\\n     * @param pool Address of the pool contract\\n     */\\n    function revokePoolRole(address pool) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _revokeRole(POOL_ROLE, pool);\\n    }\\n    \\n    /**\\n     * @dev Get loan details\\n     * @param loanId ID of the loan\\n     * @return Loan struct\\n     */\\n    function getLoan(uint256 loanId) external view returns (Types.Loan memory) {\\n        return loans[loanId];\\n    }\\n    \\n    /**\\n     * @dev Get total loan count\\n     * @return Total number of loans created\\n     */\\n    function getLoanCount() external view returns (uint256) {\\n        return _loanCounter;\\n    }\\n}\\n\",\"keccak256\":\"0xe40ca2cf22f84af0787c96cd6e04d69face262b8b5948a45a364aea43273baad\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libs/Types.sol\\\";\\n\\n/**\\n * @title ILoanManager\\n * @dev Interface for Loan Manager\\n */\\ninterface ILoanManager {\\n    function createLoan(\\n        address borrower,\\n        uint256 amount,\\n        uint16 rateBps,\\n        uint16 tenorDays\\n    ) external returns (uint256 loanId);\\n    \\n    function approve(uint256 loanId) external;\\n    function drawdown(uint256 loanId) external;\\n    \\n    function currentDebt(uint256 loanId) external view returns (\\n        uint256 principal,\\n        uint256 interest,\\n        uint256 lateFees,\\n        uint256 total\\n    );\\n    \\n    function repay(uint256 loanId, uint256 amount) external returns (uint256 remaining);\\n    function markDefault(uint256 loanId) external;\\n    function getLoan(uint256 loanId) external view returns (Types.Loan memory);\\n}\\n\",\"keccak256\":\"0x39e693b61e7d55f9dad41003dbce2c4a54770742d3ca062470f04a0854f328a2\",\"license\":\"MIT\"},\"contracts/libs/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Types\\n * @dev Shared types and structures for MicroCredit DAO\\n */\\nlibrary Types {\\n    /**\\n     * @dev Loan status enumeration\\n     */\\n    enum LoanStatus {\\n        Requested,  // 0: Loan requested by borrower\\n        Approved,   // 1: Loan approved by manager\\n        Drawn,      // 2: Loan amount drawn by borrower\\n        Repaid,     // 3: Loan fully repaid\\n        Defaulted   // 4: Loan defaulted\\n    }\\n\\n    /**\\n     * @dev Pool configuration parameters\\n     */\\n    struct PoolParams {\\n        uint16 interestRateBps;      // Interest rate in basis points (e.g., 500 = 5% annual simple)\\n        uint16 tenorDays;            // Loan term in days\\n        uint16 maxLoanToPoolBps;     // Maximum loan amount as % of pool assets (e.g., 5000 = 50%)\\n        uint16 reserveFactorBps;     // % of interest that goes to Treasury\\n        uint16 minCreditScore;       // Minimum credit score required (0-100)\\n    }\\n\\n    /**\\n     * @dev Loan structure\\n     */\\n    struct Loan {\\n        address borrower;     // Borrower address\\n        uint256 principal;    // Principal amount\\n        uint256 createdAt;    // Timestamp when loan was created\\n        uint256 drawnAt;      // Timestamp when loan was drawn\\n        uint256 dueAt;        // Timestamp when loan is due\\n        uint16 rateBps;       // Interest rate in basis points\\n        uint16 tenorDays;     // Loan term in days\\n        LoanStatus status;    // Current loan status\\n    }\\n}\\n\",\"keccak256\":\"0x42cf03e37c41a87198786e015f4a5f7f14951eb2600d8fe5bc15360870e03145\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001c60003361004b565b6100467f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b083361004b565b6100ea565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166100e6576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556100a53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6114ed806100f96000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063a217fddf116100ad578063e1d927c811610071578063e1d927c81461029c578063e1ec3c68146102af578063e5b4003b1461032d578063ec87621c14610340578063fa404e341461036757600080fd5b8063a217fddf14610228578063b759f95414610230578063bcb2966714610243578063d547741f14610276578063d8aed1451461028957600080fd5b8063504006ca116100f4578063504006ca146101c757806352196812146101e757806391d14854146101ef5780639aaa9dac14610202578063a079a4dd1461021557600080fd5b806301ffc9a714610131578063248a9ca3146101595780632f2ff15d1461018a57806336568abe1461019f578063404ccd07146101b2575b600080fd5b61014461013f36600461106c565b61037a565b60405190151581526020015b60405180910390f35b61017c610167366004611096565b60009081526020819052604090206001015490565b604051908152602001610150565b61019d6101983660046110cb565b6103b1565b005b61019d6101ad3660046110cb565b6103db565b61017c60008051602061147883398151915281565b6101da6101d5366004611096565b61045e565b604051610150919061112f565b60015461017c565b6101446101fd3660046110cb565b61054d565b61017c6102103660046111b5565b610576565b61019d610223366004611096565b610760565b61017c600081565b61019d61023e366004611096565b610869565b610256610251366004611096565b610931565b604080519485526020850193909352918301526060820152608001610150565b61019d6102843660046110cb565b6109d8565b61017c610297366004611202565b6109fd565b61019d6102aa366004611096565b610bc7565b6103196102bd366004611096565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401546001600160a01b039093169493919290919061ffff8082169162010000810490911690600160201b900460ff1688565b604051610150989796959493929190611224565b61019d61033b36600461127d565b610cb4565b61017c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b61019d61037536600461127d565b610cd7565b60006001600160e01b03198216637965db0b60e01b14806103ab57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546103cc81610cfa565b6103d68383610d07565b505050565b6001600160a01b03811633146104505760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61045a8282610d8b565b5050565b6104a36040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e082015290565b60008281526002602081815260409283902083516101008101855281546001600160a01b031681526001820154928101929092529182015492810192909252600381015460608301526004808201546080840152600582015461ffff80821660a08601526201000082041660c085015260e0840191600160201b90910460ff1690811115610533576105336110f7565b6004811115610544576105446110f7565b90525092915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600060008051602061147883398151915261059081610cfa565b846000036105b1576040516365e52d5160e11b815260040160405180910390fd5b6001600160a01b0386166105d85760405163baf3f0f760e01b815260040160405180910390fd5b600180549060006105e8836112ae565b919050559150604051806101000160405280876001600160a01b0316815260200186815260200142815260200160008152602001600081526020018561ffff1681526020018461ffff1681526020016000600481111561064a5761064a6110f7565b9052600083815260026020818152604092839020845181546001600160a01b039091166001600160a01b0319909116178155908401516001820155918301519082015560608201516003820155608082015160048083019190915560a083015160058301805460c086015161ffff908116620100000263ffffffff199092169316929092179190911780825560e08501519264ff000000001990911690600160201b9084908111156106fe576106fe6110f7565b0217905550506040805187815261ffff878116602083015286168183015290516001600160a01b038916925084917f87bd1bf93d0ca7e7be07b6891d920024ad92a67735117c931859f629f4c0439d919081900360600190a350949350505050565b60008051602061147883398151915261077881610cfa565b600082815260026020526040902080546001600160a01b03166107ae5760405163019595ef60e71b815260040160405180910390fd5b60016005820154600160201b900460ff1660048111156107d0576107d06110f7565b146107ee5760405163baf3f0f760e01b815260040160405180910390fd5b60058101805464ff00000000191664020000000017908190554260038301556108249062010000900461ffff16620151806112c7565b6108339062ffffff16426112ee565b600482015560405183906000805160206114988339815191529061085c90600190600290611301565b60405180910390a2505050565b60008051602061147883398151915261088181610cfa565b600082815260026020526040902080546001600160a01b03166108b75760405163019595ef60e71b815260040160405180910390fd5b60006005820154600160201b900460ff1660048111156108d9576108d96110f7565b146108f75760405163baf3f0f760e01b815260040160405180910390fd5b60058101805464ff000000001916600160201b17905560405183906000805160206114988339815191529061085c90600090600190611301565b60008181526002602052604081208054829182918291906001600160a01b031661096e5760405163019595ef60e71b815260040160405180910390fd5b60026005820154600160201b900460ff166004811115610990576109906110f7565b146109ae5760405163baf3f0f760e01b815260040160405180910390fd5b806001015494506109be81610df0565b9350600092506109ce84866112ee565b9150509193509193565b6000828152602081905260409020600101546109f381610cfa565b6103d68383610d8b565b6000600080516020611478833981519152610a1781610cfa565b82600003610a38576040516365e52d5160e11b815260040160405180910390fd5b600084815260026020526040902080546001600160a01b0316610a6e5760405163019595ef60e71b815260040160405180910390fd5b60026005820154600160201b900460ff166004811115610a9057610a906110f7565b14610aae5760405163baf3f0f760e01b815260040160405180910390fd5b6000610ab982610df0565b90506000818360010154610acd91906112ee565b9050600080828810610b3357505060058301805464ff00000000191664030000000017905560006001840181905560405190955082908690899060008051602061149883398151915290610b2690600290600390611301565b60405180910390a2610b78565b83881115610b415783610b43565b875b9150610b4f828961131c565b905080856001016000828254610b65919061131c565b90915550610b759050888461131c565b96505b604080518381526020810183905290810188905289907f49770997582961635fe8a2fbf994a2bd5458d2d14bc18ee6ffe3b01d2cd895ca9060600160405180910390a250505050505092915050565b600080516020611478833981519152610bdf81610cfa565b600082815260026020526040902080546001600160a01b0316610c155760405163019595ef60e71b815260040160405180910390fd5b60026005820154600160201b900460ff166004811115610c3757610c376110f7565b14610c555760405163baf3f0f760e01b815260040160405180910390fd5b80600401544211610c795760405163baf3f0f760e01b815260040160405180910390fd5b60058101805464ff00000000191664040000000017905560405183906000805160206114988339815191529061085c90600290600490611301565b6000610cbf81610cfa565b61045a60008051602061147883398151915283610d07565b6000610ce281610cfa565b61045a60008051602061147883398151915283610d8b565b610d048133610e65565b50565b610d11828261054d565b61045a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610d473390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610d95828261054d565b1561045a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008160030154600003610e0657506000919050565b600062015180836003015442610e1c919061131c565b610e26919061132f565b600584015460018501549192506237b1d0918391610e4a9161ffff90911690611351565b610e549190611351565b610e5e919061132f565b9392505050565b610e6f828261054d565b61045a57610e7c81610ebe565b610e87836020610ed0565b604051602001610e9892919061138c565b60408051601f198184030181529082905262461bcd60e51b825261044791600401611401565b60606103ab6001600160a01b03831660145b60606000610edf836002611351565b610eea9060026112ee565b67ffffffffffffffff811115610f0257610f02611434565b6040519080825280601f01601f191660200182016040528015610f2c576020820181803683370190505b509050600360fc1b81600081518110610f4757610f4761144a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610f7657610f7661144a565b60200101906001600160f81b031916908160001a9053506000610f9a846002611351565b610fa59060016112ee565b90505b600181111561101d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610fd957610fd961144a565b1a60f81b828281518110610fef57610fef61144a565b60200101906001600160f81b031916908160001a90535060049490941c9361101681611460565b9050610fa8565b508315610e5e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610447565b60006020828403121561107e57600080fd5b81356001600160e01b031981168114610e5e57600080fd5b6000602082840312156110a857600080fd5b5035919050565b80356001600160a01b03811681146110c657600080fd5b919050565b600080604083850312156110de57600080fd5b823591506110ee602084016110af565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6005811061112b57634e487b7160e01b600052602160045260246000fd5b9052565b60006101008201905060018060a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015161ffff80821660a08501528060c08601511660c0850152505060e083015161119c60e084018261110d565b5092915050565b803561ffff811681146110c657600080fd5b600080600080608085870312156111cb57600080fd5b6111d4856110af565b9350602085013592506111e9604086016111a3565b91506111f7606086016111a3565b905092959194509250565b6000806040838503121561121557600080fd5b50508035926020909101359150565b6001600160a01b03891681526020810188905260408101879052606081018690526080810185905261ffff84811660a0830152831660c0820152610100810161127060e083018461110d565b9998505050505050505050565b60006020828403121561128f57600080fd5b610e5e826110af565b634e487b7160e01b600052601160045260246000fd5b6000600182016112c0576112c0611298565b5060010190565b62ffffff8181168382160280821691908281146112e6576112e6611298565b505092915050565b808201808211156103ab576103ab611298565b6040810161130f828561110d565b610e5e602083018461110d565b818103818111156103ab576103ab611298565b60008261134c57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176103ab576103ab611298565b60005b8381101561138357818101518382015260200161136b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516113c4816017850160208801611368565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516113f5816028840160208801611368565b01602801949350505050565b6020815260008251806020840152611420816040850160208701611368565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161146f5761146f611298565b50600019019056feb8179c2726c8d8961ef054875ab3f4c1c3d34e1cb429c3d5e0bc97958e4cab9d392df00c89a09571865cf4a708cee83527a8eba918e951b455a33269913486c3a2646970667358221220f54c9383c8b83166ac645fb9787de40fbc21b093aa2271ec23757a7dab5a1ac664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063a217fddf116100ad578063e1d927c811610071578063e1d927c81461029c578063e1ec3c68146102af578063e5b4003b1461032d578063ec87621c14610340578063fa404e341461036757600080fd5b8063a217fddf14610228578063b759f95414610230578063bcb2966714610243578063d547741f14610276578063d8aed1451461028957600080fd5b8063504006ca116100f4578063504006ca146101c757806352196812146101e757806391d14854146101ef5780639aaa9dac14610202578063a079a4dd1461021557600080fd5b806301ffc9a714610131578063248a9ca3146101595780632f2ff15d1461018a57806336568abe1461019f578063404ccd07146101b2575b600080fd5b61014461013f36600461106c565b61037a565b60405190151581526020015b60405180910390f35b61017c610167366004611096565b60009081526020819052604090206001015490565b604051908152602001610150565b61019d6101983660046110cb565b6103b1565b005b61019d6101ad3660046110cb565b6103db565b61017c60008051602061147883398151915281565b6101da6101d5366004611096565b61045e565b604051610150919061112f565b60015461017c565b6101446101fd3660046110cb565b61054d565b61017c6102103660046111b5565b610576565b61019d610223366004611096565b610760565b61017c600081565b61019d61023e366004611096565b610869565b610256610251366004611096565b610931565b604080519485526020850193909352918301526060820152608001610150565b61019d6102843660046110cb565b6109d8565b61017c610297366004611202565b6109fd565b61019d6102aa366004611096565b610bc7565b6103196102bd366004611096565b60026020819052600091825260409091208054600182015492820154600383015460048401546005909401546001600160a01b039093169493919290919061ffff8082169162010000810490911690600160201b900460ff1688565b604051610150989796959493929190611224565b61019d61033b36600461127d565b610cb4565b61017c7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b61019d61037536600461127d565b610cd7565b60006001600160e01b03198216637965db0b60e01b14806103ab57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546103cc81610cfa565b6103d68383610d07565b505050565b6001600160a01b03811633146104505760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61045a8282610d8b565b5050565b6104a36040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290529060e082015290565b60008281526002602081815260409283902083516101008101855281546001600160a01b031681526001820154928101929092529182015492810192909252600381015460608301526004808201546080840152600582015461ffff80821660a08601526201000082041660c085015260e0840191600160201b90910460ff1690811115610533576105336110f7565b6004811115610544576105446110f7565b90525092915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600060008051602061147883398151915261059081610cfa565b846000036105b1576040516365e52d5160e11b815260040160405180910390fd5b6001600160a01b0386166105d85760405163baf3f0f760e01b815260040160405180910390fd5b600180549060006105e8836112ae565b919050559150604051806101000160405280876001600160a01b0316815260200186815260200142815260200160008152602001600081526020018561ffff1681526020018461ffff1681526020016000600481111561064a5761064a6110f7565b9052600083815260026020818152604092839020845181546001600160a01b039091166001600160a01b0319909116178155908401516001820155918301519082015560608201516003820155608082015160048083019190915560a083015160058301805460c086015161ffff908116620100000263ffffffff199092169316929092179190911780825560e08501519264ff000000001990911690600160201b9084908111156106fe576106fe6110f7565b0217905550506040805187815261ffff878116602083015286168183015290516001600160a01b038916925084917f87bd1bf93d0ca7e7be07b6891d920024ad92a67735117c931859f629f4c0439d919081900360600190a350949350505050565b60008051602061147883398151915261077881610cfa565b600082815260026020526040902080546001600160a01b03166107ae5760405163019595ef60e71b815260040160405180910390fd5b60016005820154600160201b900460ff1660048111156107d0576107d06110f7565b146107ee5760405163baf3f0f760e01b815260040160405180910390fd5b60058101805464ff00000000191664020000000017908190554260038301556108249062010000900461ffff16620151806112c7565b6108339062ffffff16426112ee565b600482015560405183906000805160206114988339815191529061085c90600190600290611301565b60405180910390a2505050565b60008051602061147883398151915261088181610cfa565b600082815260026020526040902080546001600160a01b03166108b75760405163019595ef60e71b815260040160405180910390fd5b60006005820154600160201b900460ff1660048111156108d9576108d96110f7565b146108f75760405163baf3f0f760e01b815260040160405180910390fd5b60058101805464ff000000001916600160201b17905560405183906000805160206114988339815191529061085c90600090600190611301565b60008181526002602052604081208054829182918291906001600160a01b031661096e5760405163019595ef60e71b815260040160405180910390fd5b60026005820154600160201b900460ff166004811115610990576109906110f7565b146109ae5760405163baf3f0f760e01b815260040160405180910390fd5b806001015494506109be81610df0565b9350600092506109ce84866112ee565b9150509193509193565b6000828152602081905260409020600101546109f381610cfa565b6103d68383610d8b565b6000600080516020611478833981519152610a1781610cfa565b82600003610a38576040516365e52d5160e11b815260040160405180910390fd5b600084815260026020526040902080546001600160a01b0316610a6e5760405163019595ef60e71b815260040160405180910390fd5b60026005820154600160201b900460ff166004811115610a9057610a906110f7565b14610aae5760405163baf3f0f760e01b815260040160405180910390fd5b6000610ab982610df0565b90506000818360010154610acd91906112ee565b9050600080828810610b3357505060058301805464ff00000000191664030000000017905560006001840181905560405190955082908690899060008051602061149883398151915290610b2690600290600390611301565b60405180910390a2610b78565b83881115610b415783610b43565b875b9150610b4f828961131c565b905080856001016000828254610b65919061131c565b90915550610b759050888461131c565b96505b604080518381526020810183905290810188905289907f49770997582961635fe8a2fbf994a2bd5458d2d14bc18ee6ffe3b01d2cd895ca9060600160405180910390a250505050505092915050565b600080516020611478833981519152610bdf81610cfa565b600082815260026020526040902080546001600160a01b0316610c155760405163019595ef60e71b815260040160405180910390fd5b60026005820154600160201b900460ff166004811115610c3757610c376110f7565b14610c555760405163baf3f0f760e01b815260040160405180910390fd5b80600401544211610c795760405163baf3f0f760e01b815260040160405180910390fd5b60058101805464ff00000000191664040000000017905560405183906000805160206114988339815191529061085c90600290600490611301565b6000610cbf81610cfa565b61045a60008051602061147883398151915283610d07565b6000610ce281610cfa565b61045a60008051602061147883398151915283610d8b565b610d048133610e65565b50565b610d11828261054d565b61045a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610d473390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610d95828261054d565b1561045a576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008160030154600003610e0657506000919050565b600062015180836003015442610e1c919061131c565b610e26919061132f565b600584015460018501549192506237b1d0918391610e4a9161ffff90911690611351565b610e549190611351565b610e5e919061132f565b9392505050565b610e6f828261054d565b61045a57610e7c81610ebe565b610e87836020610ed0565b604051602001610e9892919061138c565b60408051601f198184030181529082905262461bcd60e51b825261044791600401611401565b60606103ab6001600160a01b03831660145b60606000610edf836002611351565b610eea9060026112ee565b67ffffffffffffffff811115610f0257610f02611434565b6040519080825280601f01601f191660200182016040528015610f2c576020820181803683370190505b509050600360fc1b81600081518110610f4757610f4761144a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610f7657610f7661144a565b60200101906001600160f81b031916908160001a9053506000610f9a846002611351565b610fa59060016112ee565b90505b600181111561101d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610fd957610fd961144a565b1a60f81b828281518110610fef57610fef61144a565b60200101906001600160f81b031916908160001a90535060049490941c9361101681611460565b9050610fa8565b508315610e5e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610447565b60006020828403121561107e57600080fd5b81356001600160e01b031981168114610e5e57600080fd5b6000602082840312156110a857600080fd5b5035919050565b80356001600160a01b03811681146110c657600080fd5b919050565b600080604083850312156110de57600080fd5b823591506110ee602084016110af565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b6005811061112b57634e487b7160e01b600052602160045260246000fd5b9052565b60006101008201905060018060a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015161ffff80821660a08501528060c08601511660c0850152505060e083015161119c60e084018261110d565b5092915050565b803561ffff811681146110c657600080fd5b600080600080608085870312156111cb57600080fd5b6111d4856110af565b9350602085013592506111e9604086016111a3565b91506111f7606086016111a3565b905092959194509250565b6000806040838503121561121557600080fd5b50508035926020909101359150565b6001600160a01b03891681526020810188905260408101879052606081018690526080810185905261ffff84811660a0830152831660c0820152610100810161127060e083018461110d565b9998505050505050505050565b60006020828403121561128f57600080fd5b610e5e826110af565b634e487b7160e01b600052601160045260246000fd5b6000600182016112c0576112c0611298565b5060010190565b62ffffff8181168382160280821691908281146112e6576112e6611298565b505092915050565b808201808211156103ab576103ab611298565b6040810161130f828561110d565b610e5e602083018461110d565b818103818111156103ab576103ab611298565b60008261134c57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176103ab576103ab611298565b60005b8381101561138357818101518382015260200161136b565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516113c4816017850160208801611368565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516113f5816028840160208801611368565b01602801949350505050565b6020815260008251806020840152611420816040850160208701611368565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008161146f5761146f611298565b50600019019056feb8179c2726c8d8961ef054875ab3f4c1c3d34e1cb429c3d5e0bc97958e4cab9d392df00c89a09571865cf4a708cee83527a8eba918e951b455a33269913486c3a2646970667358221220f54c9383c8b83166ac645fb9787de40fbc21b093aa2271ec23757a7dab5a1ac664736f6c63430008110033",
  "devdoc": {
    "details": "Manages loan lifecycle and accounting for MicroCredit pools",
    "kind": "dev",
    "methods": {
      "approve(uint256)": {
        "details": "Approve a loan request",
        "params": {
          "loanId": "ID of the loan to approve"
        }
      },
      "createLoan(address,uint256,uint16,uint16)": {
        "details": "Create a new loan request",
        "params": {
          "amount": "Principal amount requested",
          "borrower": "Address of the borrower",
          "rateBps": "Interest rate in basis points",
          "tenorDays": "Loan term in days"
        },
        "returns": {
          "loanId": "Unique identifier for the loan"
        }
      },
      "currentDebt(uint256)": {
        "details": "Calculate current debt for a loan",
        "params": {
          "loanId": "ID of the loan"
        },
        "returns": {
          "interest": "Accrued interest",
          "lateFees": "Late fees (always 0 in MVP)",
          "principal": "Remaining principal",
          "total": "Total debt"
        }
      },
      "drawdown(uint256)": {
        "details": "Process loan drawdown",
        "params": {
          "loanId": "ID of the loan to drawdown"
        }
      },
      "getLoan(uint256)": {
        "details": "Get loan details",
        "params": {
          "loanId": "ID of the loan"
        },
        "returns": {
          "_0": "Loan struct"
        }
      },
      "getLoanCount()": {
        "details": "Get total loan count",
        "returns": {
          "_0": "Total number of loans created"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantPoolRole(address)": {
        "details": "Grant POOL_ROLE to a pool contract",
        "params": {
          "pool": "Address of the pool contract"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "markDefault(uint256)": {
        "details": "Mark a loan as defaulted",
        "params": {
          "loanId": "ID of the loan to mark as defaulted"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "repay(uint256,uint256)": {
        "details": "Process loan repayment",
        "params": {
          "amount": "Amount being repaid",
          "loanId": "ID of the loan to repay"
        },
        "returns": {
          "remaining": "Remaining debt after repayment"
        }
      },
      "revokePoolRole(address)": {
        "details": "Revoke POOL_ROLE from a pool contract",
        "params": {
          "pool": "Address of the pool contract"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "LoanManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/LoanManager.sol:LoanManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1668,
        "contract": "contracts/LoanManager.sol:LoanManager",
        "label": "_loanCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1673,
        "contract": "contracts/LoanManager.sol:LoanManager",
        "label": "loans",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Loan)2409_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(LoanStatus)2380": {
        "encoding": "inplace",
        "label": "enum Types.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(Loan)2409_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Types.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)2409_storage"
      },
      "t_struct(Loan)2409_storage": {
        "encoding": "inplace",
        "label": "struct Types.Loan",
        "members": [
          {
            "astId": 2393,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2395,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2397,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2399,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "drawnAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2401,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "dueAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2403,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "rateBps",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 2405,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "tenorDays",
            "offset": 2,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 2408,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "status",
            "offset": 4,
            "slot": "5",
            "type": "t_enum(LoanStatus)2380"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LoanManager.sol:LoanManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}